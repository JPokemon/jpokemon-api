package org.jpokemon.api.trainers;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

import org.jpokemon.api.JPokemonException;

/**
 * Provides a way of generating unique ID numbers for trainers. The generation 
 * method of this class tries to ensure two things:
 *
 * <ul>
 * 	<li>Uniqueness of IDs. It should not be possible for two IDs returned by 
 * 	this generator to have the same value. This is the main advantage to using 
 * 	this system over a more generic ``Random.nextInt(65535)`` method, which may 
 * 	occasionally produce the same number without warning.
 * 	<li>Thread safety. The generation method of this class can be called from 
 * 	different threads and still be guaranteed to return unique IDs.
 * </ul>
 *
 * The default maximum and minimum ID numbers have been chosen based on their 
 * values in the classic games. However, for applications that require far 
 * fewer IDs (for example, a small multiplayer game with 10 players), these 
 * values can be adjusted down. Similarly, if you intend to have more than 
 * 65,000 active IDs in your application, a larger range should be specified.
 *
 * <h2>Usage Example:</h2>
 *
 * In order to generate classic-looking trainer IDs for a {@link PokemonTrainer}
 * instance, one could use the following method:
 *
 * <pre>
 * TrainerIDGenerator generator = new TrainerIDGenerator(new Random(1337));
 * PokemonTrainer trainerBob = new PokemonTrainer.setName("Bob");
 * trainerBob.setID(generator.generateUniqueID());
 * </pre>
 *
 * @author atheriel@gmail.com
 *
 * @note The guarantees of uniqueness and thread-safety come at a price: this 
 * class is much slower and more resource-intensive than some less demanding 
 * alternatives.
 */
public class TrainerIDGenerator {
	public final int MAX_ID_NUMBER;
	public final int MIN_ID_NUMBER;
	protected final Random random;
	protected final List<Integer> available;
	protected final AtomicInteger index;

	/**
	 * Provides the default constructor.
	 *
	 * <p>This constructor assumes the default ID range [0, 65535]; if you would
	 * like to specify another range, consider using one of the other available 
	 * constructors. It will also instantiated a new instance of the default, 
	 * non-crypographically secure {@link Random} class in order to reduce 
	 * latency. Again, if this is not the desired behaviour (for example, you 
	 * wish to use a seed to generate the same list over different sessions), 
	 * make use of one of the other constructors.
	 */
	public TrainerIDGenerator() {
		this(0, 65535, new Random());
	}

	public TrainerIDGenerator(Random random) {
		this(0, 65535, random);
	}

	public TrainerIDGenerator(int min, int max) {
		this(min, max, new Random());
	}

	/**
	 * Constructs a new TrainerIDGenerator with the given parameters.
	 * 
	 * @param  min    The minimum trainer ID to produce (e.g. 1).
	 * @param  max    The maximum trainer ID to produce (e.g. 65535).
	 * @param  random The random generator to use when creating the list of IDs.
	 */
	public TrainerIDGenerator(int min, int max, Random random) {
		this.MAX_ID_NUMBER = max;
		this.MIN_ID_NUMBER = min;
		this.random = random;

		// Generate a list of all possible IDs, then shuffle them
		ArrayList<Integer> sequence = new ArrayList<Integer>(this.MAX_ID_NUMBER);
		for (int x = this.MIN_ID_NUMBER; x <= this.MAX_ID_NUMBER; x++) {
			sequence.add(x);
		}
		Collections.shuffle(sequence, this.random);

		// Use a thread-safe array list to hold the available IDs
		this.available = new CopyOnWriteArrayList<Integer>(sequence);

		// Start drawing IDs from the first element of the list
		this.index = new AtomicInteger();
	}

	/**
	 * Retrieve a unique trainer ID from the generator.
	 * 
	 * @return A unique trainer ID as an integer.
	 *
	 * @throws JPokemonException if the list of available unique IDs has been 
	 *         exhausted. This should occur only if the pool of IDs was not 
	 *         sufficiently large for the application's usage to begin with.
	 */
	public int generateUniqueID() throws JPokemonException {
		if (index.get() > available.size()) {
			throw new JPokemonException("The list of unique trainer IDs has been exhausted! Please construct a new TrainerIDGenerator with a larger maximum ID number.");
		}
		return available.get(index.getAndIncrement());
	}

	/**
	 * Remove specific IDs from the generator, if they are available. This may 
	 * be useful if, for example, you want to prevent a pre-existing list of 
	 * trainer IDs (perhaps they are already in use) from being generated.
	 * 
	 * @param IDs A {@link List} of integer IDs that should not be generated by
	 *            this class's generator method.
	 */
	public void removeIDs(List<Integer> IDs) {
		this.available.removeAll(IDs);
	}
}
